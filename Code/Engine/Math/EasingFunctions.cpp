#include "Engine/Math/EasingFunctions.hpp"
#include "Engine/Math/CurveUtils.hpp"
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float Linear(float time)
{
	return time;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStart2(float time)
{
    return time * time;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStart3(float time)
{
    return time * time * time;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStart4(float time)
{
	return time * time * time * time;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStart5(float time)
{
	return time * time * time * time * time;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStart6(float time)
{
	return time * time * time * time * time * time;
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStop2(float time)
{
	return 1.f - ((1.f - time) * (1.f - time));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStop3(float time)
{
	return 1.f - ((1.f - time) * (1.f - time) * (1.f - time));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStop4(float time)
{
	return 1.f - ((1.f - time) * (1.f - time) * (1.f - time) * (1.f - time));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStop5(float time)
{
	return 1.f - ((1.f - time) * (1.f - time) * (1.f - time) * (1.f - time) * (1.f - time));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStop6(float time)
{
	return 1.f - ((1.f - time) * (1.f - time) * (1.f - time) * (1.f - time) * (1.f - time) * (1.f - time));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStep3(float time)
{
	return ((3.f * time * time) - (2.f * time * time * time));
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float SmoothStep5(float time)
{
	return time * time * time * (time * (6.f * time - 15.f) + 10.f);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float Hesitate3(float time)
{
	return time * ((4.f * time * time) - (6.f * time) + 3.f);
}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
float Hesitate5(float time)
{
// 	return time * ((16.f * time * time * time * time) - (32.f * time * time * time) + (28.f * time * time) - (14.f * time) + 3);
	
	return ComputeQuinticBezier1D(0.f, 1.f, 0.f, 1.f, 0.f, 1.f, time);

}



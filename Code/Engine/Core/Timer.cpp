#include "Engine/Core/Timer.hpp"
#include "Engine/Core/Clock.hpp"

//------------------------------------------------------------------------------------------------------------------
Timer::Timer()
{

	m_clock = &Clock::GetSystemClock();

}

//------------------------------------------------------------------------------------------------------------------
Timer::Timer(double period, const Clock * clock)
	: m_period(period)
	, m_clock(clock)
{

	if(!clock)
	{
		m_clock = &Clock::GetSystemClock();
	}

}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Timer::~Timer()
{

}

//------------------------------------------------------------------------------------------------------------------
void Timer::Start()
{
	m_startTime = m_clock->GetTotalSeconds();
}

//------------------------------------------------------------------------------------------------------------------
void Timer::Stop()
{

	m_startTime = -1.;

}

//-------------------------------------------------------------------------------------------------------------------------------------------------------------------
void Timer::Restart()
{
	Stop();
	Start();
}

//------------------------------------------------------------------------------------------------------------------
double Timer::GetElapsedTime() const
{
	if(IsStopped())
	{
		return 0.;
	}

	return m_clock->GetTotalSeconds() - m_startTime;
}

//------------------------------------------------------------------------------------------------------------------
float Timer::GetElapsedFraction() const
{
	return static_cast<float>(GetElapsedTime() * 1/m_period);
}

//------------------------------------------------------------------------------------------------------------------
bool Timer::IsStopped() const
{
	return (m_startTime < 0.);
}

//------------------------------------------------------------------------------------------------------------------
bool Timer::HasPeriodElapsed() const
{
	return (GetElapsedTime() > m_period && !IsStopped());
}

//------------------------------------------------------------------------------------------------------------------
bool Timer::DecrementPeriodIfElapsed()
{
	if(HasPeriodElapsed() && !IsStopped())
	{
		m_startTime += m_period;
		return true;
	}

	return false;
}
